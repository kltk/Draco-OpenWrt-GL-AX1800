name: BUILD

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: SSH connection to Actions
        required: false
        default: false
        type: boolean
      clean:
        description: clean cache
        required: false
        default: false
        type: boolean
      profile:
        description: 选择配置
        required: true
        default: '["axt1800"]'
        type: choice
        options:
        - '["axt1800"]'
        - '["glinet-axt1800"]'
        - '["target_wlan_ap-gl-axt1800-5-4"]'
  push:
    branches:
      - dev

env:
  REPO_URL: https://github.com/gl-inet/gl-infra-builder
  REPO_BRANCH: main
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON( github.event.inputs.profile || '["axt1800"]') }}

    steps:
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml -y
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone source code
      working-directory: /workdir
      run: |
        echo $PWD
        echo $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH gl-infra-builder
        ln -sf /workdir/gl-infra-builder $GITHUB_WORKSPACE/gl-infra-builder
        mv $GITHUB_WORKSPACE/profiles/* /workdir/gl-infra-builder/profiles/

    - name: run setup.py
      run: |
        cd /workdir/gl-infra-builder
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@github.com"
        python3 setup.py -c configs/config-wlan-ap.yml

    - name: Clone fullcone
      working-directory: /workdir/gl-infra-builder/wlan-ap/openwrt
      run: |
        mkdir -p feeds/fullcone
        git clone -b master https://github.com/LGA1150/openwrt-fullconenat ../feeds/fullconenat/fullconenat
        # patch FULLCONENAT
        mkdir package/network/config/firewall/patches
        wget -P package/network/config/firewall/patches/ https://github.com/LGA1150/fullconenat-fw3-patch/raw/master/fullconenat.patch

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: github.event.inputs.ssh == 'true'

    - name: Download package
      run: |
        cd /workdir/gl-infra-builder/wlan-ap/openwrt
        ./scripts/gen_config.py ${{matrix.target}}

        git clone https://github.com/gl-inet/glinet4.x.git -b main /workdir/glinet
        rm -f /workdir/glinet/ipq60xx/gl-sdk4-luci_git-2022.236.25805-6db5332-1_arm_cortex-a7.ipk

        ./scripts/feeds update -a
        ./scripts/feeds install -a

        # Patch LuCI
        # pushd feeds/luci
        # wget -O- https://github.com/LGA1150/fullconenat-fw3-patch/raw/master/luci.patch | git apply

        make defconfig

        sed -i s/6dfc49a96e0ba9b23d8bae0675105ea4b4c337c4869ee1fd31f65220ab0dc131/e92901b5150c6d9ac7eafc83187d8819f2c5620c2298504d84f7ecba6423bc71/ /workdir/gl-infra-builder/wlan-ap/feeds/wifi-ax/mac80211/Makefile
        cd /workdir/gl-infra-builder/wlan-ap/openwrt/files/etc
        echo "$(date +"%Y.%m.%d")" >./glversion
    
    - name: show config
      working-directory: /workdir/gl-infra-builder/wlan-ap/openwrt
      run: |
        echo ::group::config
        cat .config
        echo ::endgroup::
        echo ::group::diffconfig
        ./scripts/diffconfig.sh
        echo ::endgroup::

    - name: Set Variable
      id: variable
      working-directory: /workdir/gl-infra-builder/wlan-ap/openwrt
      run: |
        echo "date=$(/bin/date -u '+%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
        echo "hash=$(git log --pretty=tformat:'%h' -n1 tools toolchain)" >> $GITHUB_OUTPUT
        echo "prefix=${{github.event.inputs.clean == 'true' && 'ignore-' || ''}}" >> $GITHUB_OUTPUT

    - name: ccache
      uses: actions/cache@v3
      with:
        key: openwrt-${{ steps.variable.outputs.hash }}-${{steps.variable.outputs.date}}
        restore-keys: |
          ${{ steps.variable.outputs.prefix }}openwrt-${{ steps.variable.outputs.hash }}-
          ${{ steps.variable.outputs.prefix }}openwrt-
        path: |
          /workdir/gl-infra-builder/wlan-ap/openwrt/.ccache
          /workdir/gl-infra-builder/wlan-ap/openwrt/staging_dir/host*
          /workdir/gl-infra-builder/wlan-ap/openwrt/staging_dir/tool*

    - name: Compile the firmware
      id: compile
      run: |
        cd /workdir/gl-infra-builder/wlan-ap/openwrt
        echo -e "$(nproc) thread compile"
        make -j$(expr $(nproc) + 1) GL_PKGDIR=/workdir/glinet/ipq60xx/ IGNORE_ERRORS=m || make -j1 GL_PKGDIR=/workdir/glinet/ipq60xx/ IGNORE_ERRORS=m V=s

        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      working-directory: /workdir/gl-infra-builder/wlan-ap/openwrt
      run: |
        find bin -iname '*.apk' -delete
        ./scripts/diffconfig.sh > bin/targets/ipq807x/ipq60xx/diff.config
        cp .config bin/targets/ipq807x/ipq60xx/config

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: /workdir/gl-infra-builder/wlan-ap/openwrt/bin

    - name: Delete workflow runs
      uses: dmvict/clean-workflow-runs@v1.0.0
      with:
        token: ${{ github.token }}
        save_period: 1
        save_min_runs_number: 1
        run_conclusions: |
          action_required
          cancelled
          failure
          neutral
          skipped
          stale
          timed_out
